---
title: "An integrated toolkit for assessment of hydrology-dependent outcomes in the Murray-Darling Basin: HydroBOT"
author: 
 - name: Galen Holt
   orcid: 0000-0002-7455-9275
   corresponding: true
   email: galen@deakin.edu.au
   affiliation:
    - ref: du
 - name: Georgia Dwyer
   orcid: 
   corresponding: false
   affiliations:
     - ref: du
 - name: David Robertson
   orcid: 
   corresponding: false
   affiliations:
     - CSIRO
 - name: Martin Job
   orcid: 
   corresponding: false
   affiliations:
     - MDBA
 - name: Lara Palmer
   orcid: 
   corresponding: false
   affiliations:
     - MDBA
 - name: Rebecca E Lester
   orcid: 
   corresponding: false
   affiliations:
     - ref: du

affiliations:
  - id: du
    name: Deakin University
    city: Waurn Ponds
    state: Victoria
        
keywords: 
 - Murray-Darling Basin
 - Holistic modeling
 - Management modeling
 - Climate change
 - Climate adaptation
 
date: last-modified

bibliography: references.bib

number-sections: true

echo: false

format:
  # html:
  #   embed-resources: true
  #   toc: true
  #   comments:
  #     hypothesis: true
  docx:
    toc: false
    # prefer-html: true
    # setting these to the html defaults so they don't get jumbled between format
    fig-width: 7
    fig-height: 5
    reference-doc: ../default_word_template.docx
---

```{r}
options(knitr.kable.NA = '')
```

```{r}
#| eval: false

# This should not be run, except to make a simple quarto
make_simpleyml <- function(renderfile = 'auto') {
  
  if (renderfile == 'auto') {
    projpath <- rstudioapi::getActiveProject()
    docpath <- rstudioapi::documentPath()
    projdir <- sub(".*/([^/]+)$", "\\1", projpath)
    reldocpath <- sub(paste0(".*", projdir, "/"), "", docpath)
    renderfile <- reldocpath
  }
    
  
  simple_yaml <- list()
  simple_yaml$project <- list()
  simple_yaml$project$render <- list(renderfile)
  yaml::write_yaml(simple_yaml, '_quarto-singlefile.yml')
}

make_simpleyml(rstudioapi::documentPath())
```

```{r}
#| label: packages
#| include: false

#renv::install("~/Georgia/HydroBOT")
library(HydroBOT) 
library(dplyr)
library(sf)
library(huxtable)
library(ggplot2)
library(patchwork)
```

```{r}
#| label: directories
#| include: false

# This depends on the same scenarios as the demo website, so give it the path to that. This will likely be user-specific. Everything else is relative.

#demo_webdir <- file.path('../WERP_toolkit_demo')
demo_webdir <- file.path('~', '../Deakin University/QAEL - WERP in house - WERP/Toolkit/Writing/Demonstration paper')

# Why is the execute-dir not working?
# Outer directory 
project_dir = file.path(demo_webdir, 'demo_scenarios')  # '..', 

# Hydrographs
hydro_dir = file.path(project_dir, 'hydrographs')  

# EWR outputs
ewr_results <- file.path(project_dir, 'module_output', 'EWR')  

# outputs of aggregator
agg_results <- file.path(project_dir, 'aggregator_output', 'sdl_target') 

# outputs of aggregator
agg_results_gauge <- file.path(project_dir, 'aggregator_output', 'gauge_target') 

```

```{r}
#| label: data-subsets
#| include: false

gauges_to_plot <- c('412002', '419001')#, '422028', '421001')

scenarios_to_plot <- c("climatedown2adapt0", 
                       "climatedown2adapt250",
                      "climatedown2adapt6500",
                      "climatebaseadapt0",
                      "climatebaseadapt250", 
                      "climatebaseadapt6500",
                      "climateup2adapt0",
                      "climateup2adapt250",
                      "climateup2adapt6500")

scenarios_to_plot2 <- c("climatedown2adapt0", 
                      "climatebaseadapt0",
                      "climateup2adapt0")
```

```{r}
#| label: scenario-info
#| include: false
print(file.path(hydro_dir,'scenario_metadata.yml'))

scenarios <- yaml::read_yaml(file.path(hydro_dir,                                     
                                       'scenario_metadata.yml'))


```

```{r}
#| label: scenario-info2
#| include: false
scenarios <- scenarios |>  
  tibble::as_tibble() |> 
  dplyr::rename('scenario' = "scenario_name")

# Add Georgia's scenario codes
scenarios <- scenarios |> 
  arrange(flow_addition, flow_multiplier) |> 
  group_by(flow_addition) |>
  mutate(climate_code = LETTERS[1:n()]) |>
  ungroup() |> 
  group_by(flow_multiplier) |> 
  mutate(adapt_code = 1:n()) |> 
  ungroup()

# set a sceneorder
sceneorder <- forcats::fct_reorder(scenarios$scenario,
                                   (scenarios$flow_multiplier +
                                      scenarios$flow_addition/100000))

# But we usually use the codes, so we need to order them too.
rename_sceneorder <- scenarios  |> 
  mutate(scenario = ifelse(scenario == 'MAX', 'MAX', 
                           paste0(climate_code, adapt_code))) |> 
  pull(scenario) |> 
  forcats::fct_reorder((scenarios$flow_multiplier +
                          scenarios$flow_addition/100000))
```

```{r}
#| label: data-import
#| include: false

# Now that the data is in, deal with the extra junk associated with unique scenario names, hence the str_remove_all

#Hydrographs- just read in the ones we use
scenehydros <- read_hydro(hydro_dir, 
                          scenariofilter = stringr::str_c(scenarios_to_plot, '_', scenarios_to_plot), 
                          long = TRUE, format = 'csv') |> 
  mutate(scenario = stringr::str_remove_all(scenario, '.*0_')) |> 
  left_join(scenarios, by = 'scenario') |>
  rename(gauge_flow = gauge)|>
  tidyr::separate(gauge_flow, into = c("gauge", NA), sep = "_", remove = FALSE)

#Agg data (1.2 GB)
agged_data <- readRDS(file.path(agg_results, 'achievement_aggregated.rds')) |>
  purrr::map(\(x) mutate(x, 
                         scenario = stringr::str_remove_all(scenario, '.*0_'))) |> 
  purrr::map(\(x) left_join(x, scenarios, by = 'scenario'))

# because we use '_' for the 1.0 etc, it messes up some of the directories. Clean that up
agged_data <- purrr::map(agged_data,
                         \(x) dplyr::mutate(x, 
                                            scenario = stringr::str_remove_all(scenario, '_clim.*')))


#Agg data (1.2 GB)
agged_data_gauge <- readRDS(file.path(agg_results_gauge, 'achievement_aggregated.rds')) |>
  purrr::map(\(x) mutate(x, 
                         scenario = stringr::str_remove_all(scenario, '.*0_'))) |>
  purrr::map(\(x) left_join(x, scenarios, by = 'scenario'))

# because we use '_' for the 1.0 etc, it messes up some of the directories. Clean that up
agged_data_gauge <- purrr::map(agged_data_gauge,
                         \(x) dplyr::mutate(x, 
                                            scenario = stringr::str_remove_all(scenario, '_clim.*')))

```

```{r}
#| label: flow-differences


# To get a single dimension for the scenarios, we can use the overall difference in flow volumes. It's crude, but likely the only thing that works when we have an addition over part of the year and a multiplicative change. Those are fundamentally different, so we'll do our best

dif_flow <- baseline_compare(scenehydros, compare_col = 'scenario',                                             base_lev = "climatebaseadapt0",
                             values_col = 'flow',                               
                             comp_fun = c("difference"),
                             group_cols = c('Date', 'gauge')) |> 
  group_by(scenario) |> 
  summarise(scenario_difference = mean(difference_flow)*0.001)

scenarios <- left_join(scenarios, dif_flow, by = 'scenario')

```

```{r}
#| label: palettes
#| include: false

# Qualitative
SDL_pal <- make_pal(unique(agged_data$sdl_units$SWSDLName), 
                    palette = "impressionist.colors::la_recolte_des_foins_eragny")

gauge_pal <- make_pal(unique(gauges_to_plot),                       
                      palette = 'ggsci::nrc_npg')

adapt_pal <- make_pal(as.character(unique(scenarios$adapt_code)),
                      palette = 'nationalparkcolors::Redwoods')

# descriptive networks
net_pal <- list(NodeType = 'nationalparkcolors::MtRainier')

# these have to use quantitative even though they're not, or we run out of colors.
env_pals = list(EB = 'grDevices::Grays',
  EF = 'grDevices::Purp',
                NF = 'grDevices::Mint',
                NV = 'grDevices::Burg',
                OS = 'grDevices::Blues 2',
                WB = 'grDevices::Peach')

# easier printing if they have the class
make_colors <- function(x){
  class(x) <- 'colors'
  return(x)
  }

# use the first level of each of those to make a named pal. I wish there were an easier way
envgroup_pal <- purrr::imap_chr(env_pals,
                                \(x,y) make_pal(levels = y, palette = x)) 


Target_pal <- stats::setNames(envgroup_pal, 
            c(NA, 'Priority ecosystem function', 'Native fish', 'Native vegetation', 'Other species', 'Waterbirds')) |> 
  make_colors()


# Quantitative- sequential achievement
achieve_pal <- 'grDevices::Blue-Yellow'

# quantitative- diverging achievement (e.g. relative to baseline)
compare_pal <- 'scico::bam'

# We don't end up using scene_pal, I don't think. 
# But I also think we should
# Since there are two dimensions, maybe use faded colors? Should be able to bring that function over.
# But do that later
scene_pal <- make_pal(unique(scenehydros$scenario),                       
                      palette = "viridis::mako", #'ggsci::nrc_npg', 
                      refvals = 'base', refcols = 'black')


climate_code_pal <- stats::setNames(scene_pal[c(1, 4, 7)],
                                    unique(scenehydros$climate_code))

sceneTarget_pal <- stats::setNames(c(envgroup_pal, climate_code_pal), 
            c(NA, "Priority ecosystem function", 'Native fish', 'Native vegetation', 'Other species', 'Waterbirds', names(climate_code_pal))) |> 
  make_colors()

#Target Palette
sceneTarget2_pal <-  stats::setNames(c("#5F9776", "#5F9776", "#5F9776", "#5F9776", "#5F9776", "#4873B8", "#B7A447", "#FDC010", "#f47f51", "#2e3d5a", "#bf3729"), 
            c("Native fish", "Native vegetation", "Waterbirds", "Other species", "Priority ecosystem function", "End of system flows", "Water allocation", "Agricultural benefits", "Social benefits", "I", "E")) |> 
  make_colors()

sceneTarget2_pal
```


# RADAR - Values across themes

```{r}

# Not sure why this doens't run for me.
yMax = max(filter(obj_sdl_to_plot, scenario %in% scenarios_to_plot2 & !is.na(Target))$ewr_achieved)+0.05
ymin = 0 #RELATIVE VERSIONS OF THIS PLOT WILL HAVE VALUES LESS THAN ONE

#Attempt to make background
background_df <- data.frame(Order = as.factor(seq(1, length(unique(obj_sdl_to_plot$Target)))),
                            Target =  factor(unique(obj_sdl_to_plot$Target), levels = unique(obj_sdl_to_plot$Target)), 
                            y = max(obj_sdl_to_plot$ewr_achieved),
                            scenario = unique(obj_sdl_to_plot$scenario)[1])|>
    mutate(Order = as.numeric(Target))|>
  filter(!is.na(Target))


plt_2 <- obj_sdl_to_plot |>
  mutate(Order = as.numeric(Target))|>
  filter(scenario %in% scenarios_to_plot2 & !is.na(Target))|>
  ggplot(
      aes(
      x = reorder(stringr::str_wrap(Target, 6), Order),
      y = ewr_achieved,
      fill = climate_code)) +
  #Make background colours:
    geom_col(data = background_df,
           aes(x = reorder(stringr::str_wrap(Target, 6), Order), y = yMax, fill = Target), colour = NA, width = 1, alpha = 0.3)+
    geom_col(data = background_df,
           aes(x = reorder(stringr::str_wrap(Target, 6), Order), y = ymin, fill = Target), colour = NA, width = 1, alpha = 0.3)+
  # Make dashed lines:
  geom_hline(
    aes(yintercept = y),
    data.frame(y = c(ymin, 0, yMax/2, yMax)),
    color = "grey40", linetype = "longdash"
  ) +
  # Make scenario BARS - EWR achieved
   geom_col(position=position_dodge(),width=0.65,size=0.3) +
  # Make arrows:
  geom_segment(
    aes(
      x = stringr::str_wrap(Target, 6), y = ymin, 
      xend = stringr::str_wrap(Target, 6), yend = yMax),  
    linetype = "solid", color = "gray20",arrow = arrow(length = unit(0.25, "cm"), type = "closed"), linewidth = 0.2) + 
  coord_cartesian(ylim = c(ymin, yMax))+
  # Make it circular:
  coord_polar()+
  theme_werp_toolkit()+
  theme(text = element_text(size = 10), axis.title.x = element_blank(), axis.title.y = element_text(hjust=0.75))+
  scale_fill_manual(values = sceneTarget_pal, aesthetics = "fill", breaks = c("A", "E", "I"), name = "Climate scenario")+
  labs(y = "Proportion EWR achieved")


```

```{r}
#| eval: false

## Radar for graphical abstract with data for other themes
obj_sdl_to_plot_temp <- obj_sdl_to_plot |>
  filter(Target %in% c("Waterbirds", "Native fish", "Other species", "Native vegetation"))|>
  mutate(Target = as.character(Target))|>
  mutate(ewr_achieved = ifelse(Target == "Waterbirds", ewr_achieved + 0.3,
                               ifelse(Target == "Native fish", ewr_achieved/2+0.3,
                                      ifelse(Target == "Other species", flow_multiplier/4,
                                             ifelse(Target == "Native vegetation", flow_multiplier/4.5, NA)))),
         Target = case_when(Target == "Waterbirds" ~ "Agricultural benefits",
                            Target == "Native fish" ~ "Water allocation",
                            Target == "Other species" ~ "End of system flows",
                            Target == "Native vegetation" ~ "Social benefits"))
  
obj_sdl_to_plot_temp   <- bind_rows(obj_sdl_to_plot_temp, obj_sdl_to_plot)


obj_sdl_to_plot_temp   <- obj_sdl_to_plot_temp|>
  mutate(Target = as.character(Target))|>
  mutate(Target = factor(Target, levels = c("Native fish","Native vegetation","Waterbirds", "Other species", "Priority ecosystem function", "End of system flows","Water allocation","Agricultural benefits", "Social benefits")))|>
  arrange(Target)|>
  mutate(Order = as.numeric(Target))|>
  mutate(ewr_achieved = abs(ewr_achieved))

#Attempt to make background
background_df <- data.frame(Order = as.factor(seq(1, length(unique(obj_sdl_to_plot_temp$Target)))),
                            Target =  factor(unique(obj_sdl_to_plot_temp$Target), levels = unique(obj_sdl_to_plot_temp$Target)), 
                            y = max(obj_sdl_to_plot_temp$ewr_achieved),
                            scenario = unique(obj_sdl_to_plot_temp$scenario)[1])|>
    mutate(Order = as.numeric(Target))|>
  filter(!is.na(Target))


yMax = 0.65
ymin = 0 #RELATIVE VERSIONS OF THIS PLOT WILL HAVE VALUES LESS THAN ONE

plt_20 <- ggplot(filter(obj_sdl_to_plot_temp, scenario %in% c("climatebaseadapt0",  "climateup2adapt0") & !is.na(Target)),
      aes(
      x = reorder(stringr::str_wrap(Target, 6), Order),
      y = ewr_achieved,
      fill = climate_code)) +
  #Make background colours:
    geom_col(data = background_df,
           aes(x = reorder(stringr::str_wrap(Target, 6), Order), y = yMax, fill = Target), colour = NA, width = 1, alpha = 0.3)+
    geom_col(data = background_df,
           aes(x = reorder(stringr::str_wrap(Target, 6), Order), y = ymin, fill = Target), colour = NA, width = 1, alpha = 0.3)+
  # Make dashed lines:
  geom_hline(
    aes(yintercept = y),
    data.frame(y = c(ymin, 0, yMax/2, yMax)),
    color = "grey40", linetype = "longdash"
  ) +
  # Make scenario BARS - EWR achieved
   geom_col(position=position_dodge(),width=0.65,size=0.3) +
  # Make arrows:
  geom_segment(
    aes(
      x = stringr::str_wrap(Target, 6), y = ymin, 
      xend = stringr::str_wrap(Target, 6), yend = yMax),  
    linetype = "solid", color = "gray20",arrow = arrow(length = unit(0.25, "cm"), type = "closed"), linewidth = 0.2) + 
  coord_cartesian(ylim = c(ymin, yMax)) +
  # Make it circular:
  coord_polar() +
  theme_werp_toolkit()+
  theme(text = element_text(size = 10), axis.title.x = element_blank(), axis.title.y = element_text(hjust=0.75))+
  scale_fill_manual(values = sceneTarget2_pal, aesthetics = "fill", breaks = c("A", "E", "I"), name = "Climate scenario")+
  labs(y = "Proportion EWR achieved")

#plt_2

#ggsave(plot = plt_20, filename = file.path(demo_webdir,"images", paste0("radar_env", Sys.Date(), ".pdf")), device = "pdf", width = 5, height = 5)

```

```{r}
#| label: fig-radar
#| fig-cap: Condition results visualised as a radar plot with the three climate scenarios. This approach allows visualising changes in outcome of disparate thematic variables (as illustrated in the graphical abstract) and is useful for quick broad-scale representation of the results.

plt_2
```

