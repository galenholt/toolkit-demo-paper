---
title: "Simple toolkit template"
echo: true
params:
  RERUN_EWR: false
  RERUN_AGG: true
---

### Load libraries

```{r}
#| message: false
library(HydroBOT)
library(sf)
library(dplyr)
library(ggplot2)
```

```{r}
future::plan(future::multisession)

```

## User arguments

As a user, we need to set

-   Paths to input

-   Paths to save output

-   Module arguments (minimal)

-   Aggregation sequence and functions


## Paths

```{r}
#demo_webdir <- file.path('../WERP_toolkit_demo')
demo_webdir <- file.path('~', '../Deakin University/QAEL - WERP in house - WERP/Toolkit/Writing/Demonstration paper')

# Outer directory 
project_dir = file.path(demo_webdir, 'demo_scenarios')  # '..', 

# Hydrographs
hydro_dir = file.path(project_dir, 'hydrographs')  

# EWR outputs
ewr_results <- file.path(project_dir, 'module_output', 'EWR')  

# outputs of aggregator
agg_results_sdl <- file.path(project_dir, 'aggregator_output', 'sdl_target') 
agg_results_min_timing <- file.path(project_dir, 'aggregator_output', 'min_timing')
agg_results_median <- file.path(project_dir, 'aggregator_output', 'median')

agg_results_gauge <- file.path(project_dir, 'aggregator_output', 'gauge_target') 

# outputs of aggregator
agg_results_pooled_ewrs <- file.path(project_dir, 'aggregator_output', 'pooled_ewr') 

```

## Module controls

We need yearly for analysis, and nothing returned here.

```{r}
outputType <- list('summary', 'yearly')
returnType <- list('none') # list('summary', 'yearly')
```

## Aggregation sequencing

-   Sequence of steps

-   Sequence of functions

There are *many* ways to specify, these are simple.

The planning units sometimes overlap into the Lower Darling, which we don't want, so don't give them the option.
```{r}
sdl_clip <- sdl_units |> 
  filter(SWSDLName %in% c("Lachlan", "Namoi", "Macquarie-Castlereagh"))
```


```{r}
aggseq_main <- list(all_time = 'all_time',
               ewr_code = c('ewr_code_timing', 'ewr_code'),
               planning_unit = planning_units,
               env_obj =  c('ewr_code', "env_obj"),
               sdl_units = sdl_clip,
               Target = c('env_obj', 'Target'),
               mdb = basin,
               target_5_year_2024 = c('Target', 'target_5_year_2024'))


funseq_main <- list('ArithmeticMean', 
               'CompensatingFactor',
               'ArithmeticMean',
               'ArithmeticMean',
               'SpatialWeightedMean',
               'ArithmeticMean',
               'SpatialWeightedMean',
               'ArithmeticMean')


medna <- function(x) {
  y <- median(x, na.rm = TRUE)
  return(y)
}

funseq_min_timing <- list('ArithmeticMean', 
               'LimitingFactor',
               'ArithmeticMean',
               'ArithmeticMean',
               'SpatialWeightedMean',
               'ArithmeticMean',
               'SpatialWeightedMean',
               'ArithmeticMean')

funseq_median <- list('ArithmeticMean', 
               'medna',
               'medna',
               'medna',
               'medna',
               'medna',
               'medna',
               'medna')


aggseq_2 <- list(all_time = 'all_time',
               ewr_code = c('ewr_code_timing', 'ewr_code'),
               env_obj =  c('ewr_code', "env_obj"),
               Target = c('env_obj', 'Target'),
               target_5_year_2024 = c('Target', 'target_5_year_2024'))

funseq_2 <- list('ArithmeticMean', 
               'CompensatingFactor',
               'ArithmeticMean',
               'ArithmeticMean',
               'ArithmeticMean')


```

## Run EWR

*Using `rparallel = TRUE` here would run in parallel over all scenarios.* 6201.61 seconds locally if not parallel

```{r}
#| message: false
if (params$RERUN_EWR) {
  system.time(ewr_out <- prep_run_save_ewrs(hydro_dir = hydro_dir,
                              output_parent_dir = project_dir,
                              outputType = outputType,
                              returnType = returnType, 
                              rparallel = TRUE))
}


```

## Aggregate


-   Sequence (levels of each theme, space, time axis)

-   Aggregation functions at each step


```{r}
if (params$RERUN_AGG) {
  # This is the main data
  agged_data_main <- read_and_agg(datpath = ewr_results, 
           type = 'achievement',
           geopath = bom_basin_gauges,
           causalpath = causal_ewr,
           groupers = 'scenario',
           aggCols = 'ewr_achieved',
                      group_until = list(SWSDLName = is_notpoint,
             planning_unit_name = is_notpoint, 
                                gauge = is_notpoint),
            pseudo_spatial = c('planning_unit'),
           aggsequence = aggseq_main,
           funsequence = funseq_main,
           saveintermediate = TRUE,
           namehistory = FALSE,
           keepAllPolys = FALSE,
           returnList = TRUE,
           savepath = agg_results_sdl,
           rparallel = TRUE)
  
    agged_data_min_timing <- read_and_agg(datpath = ewr_results, 
           type = 'achievement',
           geopath = bom_basin_gauges,
           causalpath = causal_ewr,
           groupers = 'scenario',
           aggCols = 'ewr_achieved',
           group_until = list(SWSDLName = is_notpoint,
             planning_unit_name = is_notpoint, 
                                gauge = is_notpoint),
            pseudo_spatial = c('planning_unit'),
           aggsequence = aggseq_main,
           funsequence = funseq_min_timing,
           saveintermediate = TRUE,
           namehistory = FALSE,
           keepAllPolys = FALSE,
           returnList = TRUE,
           savepath = agg_results_min_timing,
           rparallel = FALSE)
    
        agged_data_median <- read_and_agg(datpath = ewr_results, 
           type = 'achievement',
           geopath = bom_basin_gauges,
           causalpath = causal_ewr,
           groupers = 'scenario',
           aggCols = 'ewr_achieved',
           group_until = list(SWSDLName = is_notpoint,
             planning_unit_name = is_notpoint, 
                                gauge = is_notpoint),
            pseudo_spatial = c('planning_unit'),
           aggsequence = aggseq_main,
           funsequence = funseq_median,
           saveintermediate = TRUE,
           namehistory = FALSE,
           keepAllPolys = FALSE,
           returnList = TRUE,
           savepath = agg_results_median,
           rparallel = FALSE)

  # This stays at the gauge level- used for causal network plot to avoid space getting mixed up.
agged_data_2 <- read_and_agg(datpath = ewr_results, 
           type = 'achievement',
           geopath = bom_basin_gauges,
           causalpath = causal_ewr,
           groupers = 'scenario',
           aggCols = 'ewr_achieved',
           group_until = list(SWSDLName = is_notpoint,
             planning_unit_name = is_notpoint, 
                                gauge = is_notpoint),
            pseudo_spatial = c('planning_unit'),
           aggsequence = aggseq_2,
           funsequence = funseq_2,
           saveintermediate = TRUE,
           namehistory = FALSE,
           keepAllPolys = FALSE,
           returnList = TRUE,
           savepath = agg_results_gauge,
           rparallel = TRUE)
}

```


